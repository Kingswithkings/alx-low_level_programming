!<arch>
0-isupper.c/    0           0     0     644     260       `
#include "main.h"

/**
 * _isupper - return 1 if parameter is uppercase alphabet
 * @c: the character to check
 * Return:  0 (failure)
 */

int _isupper(int c)
{
	int i;

	for (i = 'A'; i <= 'Z'; i++)
	{
		if (i == c)
		{
			return (1);
		}
	}

	return (0);
}
0-memset.c/     0           0     0     644     623       `
/**
 * _memset - a function that fills
 * memory with a constant byte
 *
 * @s: input pointer to char type
 * represents the pointer to the
 * block of memory to fill
 * @b: input variable of char type
 * represents the character to
 * fill s
 * @n: unsigned int variable
 * the number of bytes to be filled
 *
 * Return: A pointer to the filled memory
 * area @s
 */

char *_memset(char *s, char b, unsigned int n)
{
	/**
	 * declare an unsigned int
	 * because we are storing a
	 * value that will always be
	 * non-negative (zero or positive)
	 */
	unsigned int i;

	for (i = 0; i < n; i++)
		s[i] = b;

	return (s);
}


0-strcat.c/     0           0     0     644     333       `
#include "main.h"
/**
 * _strcat - concatenates two strings
 * @dest: input value
 * @src: input value
 * Return: void
 */
char *_strcat(char *dest, char *src)
{
	int i;
	int j;

	i = 0;
	while (dest[i] != '\0')
	{
		i++;
	}
	j = 0;
	while (src[j] != '\0')
	{
		dest[i] = src[j];
		i++;
		j++;
	}

	dest[i] = '\0';
	return (dest);
}

100-atoi.c/     0           0     0     644     460       `
#include "main.h"

/**
 * _atoi - converts a string to an integer
 *
 * @s: string input parameter
 *
 * Return: converted integer from string
 */

int _atoi(char *s)
{
	int i;
	int res = 0;
	int sig = -1;
	int brk = 0;

	for (i = 0; s[i] != '\0'; i++)
	{
		if (s[i] == '-')
			sig = sig * -1;
		if (s[i] >= '0' && s[i] <= '9')
		{
			res = res * 10;
			res -= (s[i] - '0');
			brk = 1;
		}
		else if (brk == 1)
			break;
	}
	res = sig * res;
	return (res);
}
1-isdigit.c/    0           0     0     644     271       `
#include "main.h"
#include <stdio.h>

/**
 * _isdigit - return 1 if parameter is isdigit
 * @c: the character to check
 * Return:  0 (failure)
 */

int _isdigit(int c)
{

	int i;


	for (i = '0'; i <= '9'; i++)
	{
		if (i == c)
		{
			return (1);

	}

}


return (0);

}

1-memcpy.c/     0           0     0     644     318       `
/**
 * _memcpy - function that copies memory area
 *
 * @dest: buffer where we will copy to
 * @src: what we are to copy
 * @n: n bytes of @src
 *
 * Return: Always 0 (Success)
 */

char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
		dest[i] = src[i];
	return (dest);
}
1-strncat.c/    0           0     0     644     540       `
/**
 * _strncat - a function that concatenates two strings.
 *
 * @dest: pointer to destination input
 * @src: pointer to source input
 * @n: most number of bytes from @src
 *
 * Return: @dest
 */

char *_strncat(char *dest, char *src, int n)
{
	int c, i;

	c = 0;

	/*find size of dest array*/
	while (dest[c])
		c++;
	/**
	 * src does not need to be null terminated
	 * if it contains n or more bytes
	 */
	for (i = 0; i < n && src[i] != '\0'; i++)
		dest[c + i] = src[i];
	/*null terminate dest*/
	dest[c + i] = '\0';

	return (dest);
}
2-strchr.c/     0           0     0     644     526       `
#include <stdio.h>
#include "main.h"

/**
 * _strchr - a function that locates a character in a string
 *
 * @s: pointer to our string array input
 * @c: character to locate from input array
 *
 * Return: first occurence of charatcer or null if not found
 */

char *_strchr(char *s, char c)
{
	while (*s != '\0')
	{
		if (*s == c)
			return (s);
		s++;
	}
	/**
	 * if c is '\0', you should return
	 * the pointer to the '\0' of the
	 * string s
	 */
	if (*s == c)
		return (s);
	/*return null if not found*/
	return ('\0');
}
2-strlen.c/     0           0     0     644     229       `
/**
 *  _strlen - returns the length of a string
 *
 *  @s: string parameter input
 *
 *  Return: length of string
 */

int _strlen(char *s)
{
	int counter;

	for (counter = 0; *s != '\0'; ++s)
		++counter;

	return (counter);
}

2-strncpy.c/    0           0     0     644     704       `
#include "main.h"
/**
 * _strncpy - A function that copies a string.
 *
 * @dest: pointer to destination input buffer
 * @src: pointer to source input buffer
 * @n: bytes of @src
 *
 * Return: @dest
 */

char *_strncpy(char *dest, char *src, int n)
{
	int i;

	/**
	 * iterate through src array
	 * where if there is no null byte
	 * among the first n bytes of source
	 * the string placed in dest will not be
	 * null terminated
	 */
	for (i = 0; i < n && src[i] != '\0'; i++)
		dest[i] = src[i];
	/**
	 * if the length of source is less than n
	 * write additional nullbytes to dest to
	 * ensure that a total of n bytes is written
	 */
	while (i < n)
	{
		dest[i] = '\0';
		i++;
	}

	return (dest);
}
3-islower.c/    0           0     0     644     279       `
#include "main.h"
/**
 * _islower -This program check
 * if a character is a lowercase
 * letter from the English alphabet
 * @c: input parameter
 *Return: 1 for lowercase, 0 if it's not lowercase
*/
int _islower(int c)
{
if (c >= 'a' && c <= 'z')
return (1);
else
return (0);
}

3-puts.c/       0           0     0     644     249       `
#include"main.h"

/**
 * _puts - prints a string, followed by a newline to stdout
 *
 * @str: string parameter to print
 *
 * Return: Nothing
 */

void _puts(char *str)
{
	while (*str != '\0')
	{
		_putchar(*str + 0);
		++str;
	}
	_putchar('\n');
}

3-strcmp.c/     0           0     0     644     302       `
#include "main.h"
/**
 * _strcmp - compare string values
 * @s1: input value
 * @s2: input value
 * Return: s1[i] - s2[i]
 */
int _strcmp(char *s1, char *s2)
{
	int i;

	i = 0;
	while (s1[i] != '\0' && s2[i] != '\0')
	{
		if (s1[i] != s2[i])
		{
			return (s1[i] - s2[i]);
		}
		i++;
	}
	return (0);
}
3-strspn.c/     0           0     0     644     503       `
/**
 * _strspn - a function that gets the
 * length of a prexif substring
 *
 * @s: pointer to string input
 * @accept: substring prefix to look for
 *
 * Return: the number of bytes in the initial segment
 */

unsigned int _strspn(char *s, char *accept)
{
	int i, j, f;

	i = 0;
	while (s[i] != '\0')
	{
		j = 0;
		f = 1; /*flag status*/
		while (accept[j] != '\0')
		{
			if (s[i] == accept[j])
			{
				f = 0; /*success*/
				break;
			}
			j++;
		}
		if (f == 1)
			break;
		i++;
	}

	return (i);
}

4-isalpha.c/    0           0     0     644     314       `
#include "main.h"
/**
 * _isalpha - this program checks wether a character
 * is from the English alphabet.
 * @c: input parameter
 * Return: 1 for English Character
 * 0 if the character is not English
 */
int _isalpha(int c)
{
if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'))
return (1);
else
return (0);
}
4-strpbrk.c/    0           0     0     644     463       `
/**
 * _strpbrk - a function that searches a
 * string for any of a set of bytes.
 *
 * @s: pointer to input string
 * @accept: pointer to string we
 * searching for in @s
 * Return: pointer to the bytes in @s
 * or NULL if no such byte is found
 */

char *_strpbrk(char *s, char *accept)
{
	int i, j;

	i = 0;
	while (s[i] != '\0')
	{
		j = 0;
		while (accept[j] != '\0')
		{
			if (s[i] == accept[j])
				return (s + i);
			j++;
		}
		i++;
	}
	return ('\0');
}

5-strstr.c/     0           0     0     644     637       `
/**
 * _strstr - a function that locates a substring
 *
 * @haystack: input string to search for matching
 * substrings
 * @needle: subtring to search for
 *
 * Return: a pointer to the beginning
 * of the located substring or
 * NULL if substring is not found
 */

char *_strstr(char *haystack, char *needle)
{
	/**
	 * we initialize a helping variable
	 * to assist in returning one of
	 * our parameters pointers haystack
	 */
	char *h, *n;

	while (*haystack != '\0')
	{
		h = haystack;
		n = needle;
		while (*n != '\0' && *haystack == *n)
		{
			haystack++;
			n++;
		}
		if (!*n)
			return (h);
		haystack++;
	}
	return ('\0');
}

6-abs.c/        0           0     0     644     196       `
#include "main.h"
/**
 * _abs - calculate absolute value of the number from zero.
 * @i: parameter.
 * Return: absolute value of input.
 */
int _abs(int i)
{
if (i < 0)
i = i * -1;
return (i);
}

9-strcpy.c/     0           0     0     644     391       `
/**
 * _strcpy - copies a string from one pointer to another
 * including the terminating null byte (\0)
 *
 * @src: source of string parameter input
 * @dest: destination of string
 *
 * Return: pointer to dest input parameter
 */

char *_strcpy(char *dest, char *src)
{
	int a, b = 0;

	for (a = 0; src[a] != '\0'; ++a)
	{
		dest[b] = src[a];
		++b;
	}
	dest[b] = '\0';

	return (dest);
}

_putchar.c/     0           0     0     644     247       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

